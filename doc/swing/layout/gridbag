

Property
Name        Description
------------------------
grid x      Specifies the component's horizontal grid origin (column index).
grid y      Specifies the component's vertical grid origin (row index).
grid width  Specifies the component's horizontal grid extend (number of columns). Default is 1.
grid height Specifies the component's vertical grid extend (number of rows). Default is 1.
h align     The horizontal alignment of the component within its cell. Possible values: DEFAULT, LEFT, CENTER, RIGHT and FILL. Default is DEFAULT.
v align     The vertical alignment of the component within its cell. Possible values: DEFAULT, TOP, CENTER, BOTTOM and FILL. Default is DEFAULT.
weight x    Specifies how to distribute extra horizontal space. Default is 0.0.
weight y    Specifies how to distribute extra vertical space. Default is 0.0.
insets      Specifies the external padding of the component, the minimum amount of space between the component and the edges of its display area. Default is [0,0,0,0].
ipad x      Specifies the internal padding of the component, how much space to add to the minimum width of the component. Default is 0.
ipad y      Specifies the internal padding, that is, how much space to add to the minimum height of the component. Default is 0.

----------------------------------------
        FILL

    GridBagLayout gbl = new GridBagLayout();
    container.setLayout(gbl);

    GridBagConstraints gbc = new GridBagConstraints();

    // Make the component on stretchable
    gbc.fill = GridBagConstraints.NONE;

    // Make the component only stretch horizontally
    gbc.fill = GridBagConstraints.HORIZONTAL;

    // Make the component only stretch vertically
    gbc.fill = GridBagConstraints.VERTICAL;

    // Make the component stretch in both directions
    gbc.fill = GridBagConstraints.BOTH;

    gbl.setConstraints(component, gbc);
    container.add(component);

---------------
See e626 Setting the Stretchyness of Rows and Columns in a GridBagLayout Using Layout
Weights for an explanation of stretchyness and weights. This example demonstrates
how to set the weight of a row or column by assigning the weight on a component.


    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.weightx = 1;
    gbc.weighty = 2;


    // These are the nine possible anchor values
    gbc.anchor = GridBagConstraints.CENTER;
    gbc.anchor = GridBagConstraints.NORTH;
    gbc.anchor = GridBagConstraints.NORTHEAST;
    gbc.anchor = GridBagConstraints.EAST;
    gbc.anchor = GridBagConstraints.SOUTHEAST;
    gbc.anchor = GridBagConstraints.SOUTH;
    gbc.anchor = GridBagConstraints.SOUTHWEST;
    gbc.anchor = GridBagConstraints.WEST;
    gbc.anchor = GridBagConstraints.NORTHWEST;

 -----------------------
 A gridbag layout arranges components in a two-dimensional grid of cells. The northwest-most cell
has position (0,0). The cell to the right or east has position (1,0); the cell to the bottom or
south has position (0,1).
 The size of the grid grows dynamically. For example, if you place a component at position (2,1)
in a new empty gridbag layout, the layout will automatically have a size of 3 cells across by 2
cells down.

    // Place a component at (1,1)
    gbc.gridx = 1;
    gbc.gridy = 1;
    gbl.setConstraints(component1, gbc);
    container.add(component1);
    // The layout now has 4 cells

    // Place a component at (0,0)
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbl.setConstraints(component2, gbc);
    container.add(component2);

---------------
    Set Size

    GridBagLayout gbl = new GridBagLayout();
    container.setLayout(gbl);

    // Add components to container and gbl

    // Force the layout of components before calling getLayoutDimensions()
    gbl.layoutContainer(container);

    // Get the dimensions
    int[][] dim = gbl.getLayoutDimensions();
    int cols = dim[0].length;
    int rows = dim[1].length;

-------------------------
        Промежутки вокруг компоненты

GridBagConstraints gbc = new GridBagConstraints();

    int top = 2;
    int left = 2;
    int bottom = 2;
    int right = 2;
    gbc.insets = new Insets(top, left, bottom, right);

----------------
With internal padding, you can increase or decrease the minimum size of a component.
For example, if the minimum width of a component is 10 and ipadx is 2, the minimum width
of the component within the gridbag layout becomes 14.

  GridBagConstraints gbc = new GridBagConstraints();

    gbc.ipadx = 2;
    gbc.ipady = 4;
