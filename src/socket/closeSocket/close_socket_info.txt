
13 авг 2013 02:28

Не программист (и друзья тоже)), но интересно. Есть сервер и к нему подключаются клиенты (всё как обычно). Протокол обмена данными по типу "вопрос-ответ". Я где-то читал что по возможности закрывать socket надо на стороне клиента, потому что, если наоборот, тогда у сервера будут ещё висеть некоторое время thread-ы в режиме TIME_WAIT и держать ресурсы. Всё это связано со значением SO_LINGER в TCP протоколе (задержка для отправки недоотправленного). Я проверил - по дефолту SO_LINGER для сокетов -1 т.е. отключён надо полагать...
Теперь дальше: thread-ы сервера большую часть времени проводят в блокированном состоянии пытаясь прочитать в потоке вопросы клиентов. Если начать закрывать соединение закрывая сокет на стороне клиента, тогда EOFException на сервере a это abortive и никак не graceful shutdown. Т.е. мне нужно отправить серверу "Bye" чтобы он начал закрывать сокет? А со значением параметра SO_LINGER на серверовском сокете равным -1 он быстро его закроет. Я правильно понял?

А почему EOFException? Вы DataInputStream используете? Обычные сокеты в этом случае исключение не выбрасывают, насколько я помню. Они возвращают обычный "конец файла" (отрицательное значение из вызова read). Поэтому его можно корректно обработать. Для DataInputStream можно и EOFException перехватить, не так уж это и страшно (в обработчике сокет закрыть). А соединения лучше со стороны клиента закрывать, как раз на случай SO_LINGER и TIMED_WAIT.
Как работает SO_LINGER со значением -1 не знаю, не проверял. Может, кто-то еще напишет.

Нет не DataInputStream а ObjectInputStream. Да EOFException именно в read. Почему не хочется ловить? Потому, что есть подозрения что это будет не явное закрытие соединения, если эта ошибка может возникать ещё при каких-то случаях. А хочется, чтобы всё было красиво.
С терминологией я, наверное, напутал немного. Abortive shutdown это, скорее всего, когда SO_LINGER таймаут установлен на 0.
Напишите правильно ли я понял и так ли надо делать?

------

Есть красивый вариант. Отправляете от клиента сообщение "Bye" (или любое другое сообщение о "конце обмена" на логическом уровне). После чего делаете socket.shutdownOutput на клиенте. В этом случае инициатива по закрытию будет на его стороне (и TIMED_WAIT - тоже). На сервере получив Bye считываете (уже из простого InputStream) следующий байт. Во-первых, чтобы убедиться, что fin дошел до сервера (а не остался следующим пакетом). Во-вторых, еще и ваш протокол проверите (а то вдруг там клиент писать надумал). После этого спокойно закрываете сокет.

EOFException это не abortive, все правильно. Это вообще логического уровня исключение. Но на всякий случай считать, что оно является ошибкой передачи вполне можно (мало ли где что глючит, это не проблема).

Что касается SO_LINGER. Это очень хитрая штука. Она влияет как на "закрывающего", так и на другую сторону. На стороне закрывающего SO_LINGER влияет на то, будет ли socket.close блокирующим (и, соответственно, какова вероятность получить информацию о том, что не все данные дошли). На другой стороне - на то, какова вероятность получить CONNECTION_RESET вместо закрытия сокета или таймаута. Пусть далее "сервер" - сторона, инициировавшая закрытие. "Клиент" - протиовопложная сторона.

Сначала о том, зачем нужен TIMED_WAIT. В этом состоянии сокет _может_ подтверждать получение данных от другой стороны (в основном, потерявшийся FIN от сервера, но, вроде бы, и часть предыдущих данных может быть). Нужна эта фича в основном тогда, когда клиент хочет знать, были ли доставлены его данные полностью или нет (т.е. у него тоже используется SO_LINGER). Если на другой стороне никто не интересуется результатами, здесь подошел бы и обычный RST при остутствии соединения (вместо ACK в текущем варианте), последствия были бы такими же. Но вот такой опции в протоколе TCP нет, поэтому мы имеем TIMED_WAIT.

Теперь что обозначают значения SO_LINGER (на сервере в нашей терминологии).
1. Если значение -1 (это в java так, на системном уровне в linux чуть по-другому). Обозначает, что SO_LINGER не используется. Но не обозначает, что ресурсы будут освобождены сразу. Socket.close - не блокирующий (соответственно, нет шансов узнать о том, что другая сторона получила все данные). Но сокет после ряда обменов уходит в TIMED_WAIT. Причина выше - не известны намерения противоположной стороны (о желаемой надежности доставки).
2. Значение 0. Это самый что ни на есть abortive shutdown. close - не блокирующий. На клиента отправляется RST. Поэтому если сервер писал какие-то данные (или клиент их читал), у клиента нет никаких шансов получить EOF. Он получит ConnectionReset. Если же клиент уже ничего не читает/не пишет, шансов получить исключение у него не так много. Я вот не знаю, может ли socket.close выбросить ConnectionReset. Если не может (или socket.close уже выполнился до того, как на клиента пришел rst), то клиент вообще ничего не заметит.
3. Значение положительно. Это время ожидания на close() до подтверждения клиентом доставки всех данных с сервера. И только это. Если я правильно понял опцию, сокет после этого вполне может находиться в TIME_WAIT (потому что клиент может хотеть подтверждения доставки его данных/закрытия соединения). Надо бы попробовать, как это на самом деле выглядит.

Итого. Станадртный подход - сделать закрытие сокета на стороне клиента (маркер можно и стоит отправить перед завершением обмена, чтобы на логическом уровне тоже был виден "конец"). На сервере дождаться еще и "конца потока" после сообщения (иначе можно при особом везении вообще TIMED_WAIT с двух сторон получить!). После чего успешно закрыть свой сокет и дать клиенту повисеть на TIMED_WAIT.

Можно, конечно, и соригинальничать. На клиенте делать все так же - отправка маркера, закрытие сокета. А вот на сервере делать SO_LINGER со значением 0. Клиент уже все равно ничего посылать и читать не собирается. Дошел ли Bye до сервера его тоже не особо интересует (в этом случае сервер ошибку потока получит). Так что если RST дойдет до клиента, то и у него не будет TIMED_WAIT. Это, правда, не исключает возможносит висеть на FIN_WAIT_2 в случае потери пакетов :). Предварительно, правда, нужно проверить, что socket.close нормально переносит ситуацию, когда соединение было сброшено с другой стороны (я потом для себя еще проверю, мне самому интересно стало).

Использованная литература:
1, 2, 3, 4.

P.S. Лирическое отступление. Все вышесказанное имеет смысл только при установленных таймаутах на чтение/запись. Иначе сокет может зависнуть практически во всех остальных состояниях помимо TIMED_WAIT (т.е. вы не отличите "ничего не приходит потому, что никто не пишет" или "ничего не приходит потому, что уже час не работает сеть"). В этом случае почти всегда будет работать обычный (неоригинальный) close после ожидания конца потока после Bye. А вот если Bye получили, а конца файла все нет и нет, то соединение можно и жестко сбросить (см. первую ссылку).

P.P.S. Я мог и напутать где-то, сам пока плохо разбираюсь, как TCP на нижнем уровне устроен.

---------

Огромное спасибо!
Честно признаюсь - с трудом понимаю.
Вот здесь есть ещё кое-какая информация: http://msdn.microsoft.com/en-us/library/windows/desktop/ms738547(v=vs.85).aspx (если кто интересуется этой веткой)

Я набросал тестовую программку с mark и reset как в этой статье: http://techtavern.wordpress.com/2010/11/09/how-to-prevent-eofexception-when-socket-is-closed/
Сервер:

Вот такое получилось... Без пулов потоков конечно... На скорую руку

Такого фокуса как у него (в той статье) с DataInputStream у меня не получилось - mark() и reset() не поддерживаются, а так же и в InputStream, ObjectInputStream. Сделал через BufferedInputStream. У меня WinXP SP3 и Java 6... может от этого зависит. Ну и ладно.

Вопрос: Так нормально будет? )))))

----

Да, нормально. Только в сервере thread.run на thread.start исправьте :))

BufferedStream на чтение в любом случае полезная штука, не только из-за mark/reset. Особенно при сложных потоках вроде ObjectInputStream (меньше системных вызовов, снижает нагрузку при чтении данных). Да и на запись можно поставить тоже (он потом flush'иться будет нормально).

Косметически потом еще четыре строчки (от mark до reset включительно) в метод можно вынести "hasMoreData" и цикл крутить "while(hasMoreData()) {}", например. В production коде читаться будет гораздо легче (mark/reset в таком виде для меня все же трюк).

Но, в общем, идею вы уловили правильно. Это все косметические замечания.

----

Спасибо.
Уже читаю про nio т.к. 100 подключений хорошо а 1000 ещё лучше))))
Правда, обидно будет, наверное, с multi-thread на один поток переписывать сервер, если с nio у меня сложиться.
