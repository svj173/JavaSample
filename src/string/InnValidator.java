package string;


import java.util.regex.Pattern;

/**
 * === Структура ИНН для юридических лиц
 * ИНН юридических лиц состоит из десяти последовательных цифр:
 * <p>
 * 1-2: код субъекта Российской федерации;
 * 3-4: код налоговой инспекции субъекта Российской Федерации;
 * 1-4: код подразделения Федеральной налоговой службы в соответствии со Справочником обозначений налоговых органов для целей учета налогоплательщиков;
 * 5-9: порядковый номер в рамках данного подразделения Федеральной налоговой службы;
 * 10: контрольное число.
 * <p>
 * === Структура ИНН для физических лиц
 * ИНН физических лиц состоит из двенадцати последовательных цифр:
 * <p>
 * 1-2: код субъекта Российской федерации;
 * 3-4: код налоговой инспекции субъекта Российской Федерации;
 * 1-4: код подразделения Федеральной налоговой службы в соответствии со Справочником обозначений налоговых органов для целей учета налогоплательщиков;
 * 5-10: порядковый номер в рамках данного подразделения Федеральной налоговой службы;
 * 11-12: контрольные числа.
 * <p>
 * === Проверка ИНН
 * <p>
 * Алгоритм.
 * <p>
 * 10 значный)
 * Для расчета десятого контрольного разряда в 10-ти значном ИНН, каждая цифра ИНН (кроме десятой) умножается на соответствующий множитель в соответствии с таб.1,
 * затем все значения суммируются, сумма берется по модулю 11, затем полученное число берется по модулю 10 это и есть десятый разряд.
 * <p>
 * 12 значный)
 * 11: Для расчета 11-ого контрольного разряда (1-ой контрольной цифры) в 12-ти значном ИНН каждая цифра ИНН (кроме 11-ой и 12-ой)
 * умножается на соответствующий множитель в соответствии с таб.1 , затем все значения суммируются , сумма берется по модулю 11, затем полученное число берется по модулю 10 это и есть 11-ый разряд.
 * 12: Для расчета 12-ого контрольного разряда (2-ой контрольной цифры) в 12-ти значном ИНН каждая цифра ИНН (кроме 12-ой)
 * умножается на соответствующий множитель в соответствии с таб.1 , затем все значения суммируются, сумма берется по модулю 11,
 * затем полученное число берется по модулю 10 это и есть 12-ый разряд.
 * <p>
 * === Конкретные примеры ===
 * <p>
 * 1) 12
 * ИНН 500100732259 — 12 цифр (первый попавшийся в Интернете ИНН).
 * <p>
 * Шаг 1: (7, 2, 4, 10, 3, 5, 9, 4, 6, 8)
 * 5*7+ 0*2+ 0*4+ 1*10+ 0*3+ 0*5+ 7*9+ 3*4+ 2*6+ 2*8= 148
 * 148 = 11*13 + 5(остаток);       148 / 11 = 13,4545454545
 * 5 - равенство с первым контрольным числом
 * Шаг 2: (3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8)
 * 5*3+ 0*7+ 0*2+ 1*4+ 0*10+ 0*3+ 7*5+ 3*9+ 2*4+ 2*6+ 5*8= 141
 * 141 = 11*12 + 9(остаток);       141 / 11 = 12,8181818182
 * 9 - совпадает со вторым контрольным числом
 * Оба контрольных числа совпадают, номер правильный.
 * <p>
 * <p>
 * 2) 10
 * ИНН 7830002293 — 10 цифр (Санкт-Петербургская бумажная фабрика Гознака).
 * <p>
 * Шаг 1: (2, 4, 10, 3, 5, 9, 4, 6, 8)
 * 7*2+ 8*4+ 3*10+ 0*3+ 0*5+ 0*9+ 2*4+ 2*6+ 9*8 = 168
 * 168= 11*15 +3(остаток)        168 / 11 = 15,2727272727
 * Контрольное число совпадает, номер правильный.
 * <p>
 * <BR/>
 * <BR/> User: svj
 * <BR/> Date: 27.04.2018 14:13
 */
public class InnValidator
{
    /** Проверка - чтобы толкьо числа и только 10 или 12. */
    private static final Pattern innPatter = Pattern.compile ( "\\d{10}|\\d{12}" );
    private static final int[] checkArr = new int[] { 3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8 };


    public static void main ( String[] args )
    {
        InnValidator validator;
        String[] list;
        boolean b;

        // валидные только первые три.
        list = new String[] { "500100732259", "7830002293", " 7830002293 ", "7830002294", "500100332251", "7830002294s", "78300022942", "  783000229" };
        validator = new InnValidator ();

        for ( String inn : list )
        {
            b = validator.isValidINN ( inn );
            System.out.println ( inn + ": " + b );
        }

        /*
        assert isValidINN ( "500100732259" );
        assert isValidINN ( "7830002293" );
        assert isValidINN ( " 7830002293 " );
        assert !isValidINN ( "7830002294" );
        assert !isValidINN ( "500100332251" );
        assert !isValidINN ( "7830002294s" );
        assert !isValidINN ( "78300022942" );
        assert !isValidINN ( "  783000229" );
        */
    }

    public boolean isValidINN ( String inn )
    {
        inn = inn.trim();

        if ( ! innPatter.matcher ( inn ).matches() )
            return false;

        int length = inn.length();
        if ( length == 12 )
            return INNStep ( inn, 2, 1 ) && INNStep ( inn, 1, 0 );
        else
            return INNStep ( inn, 1, 2 );
    }

    private boolean INNStep ( String inn, int offset, int arrOffset )
    {
        int sum = 0;
        int length = inn.length ();
        for ( int i = 0; i < length - offset; i++ )
        {
            sum += ( inn.charAt ( i ) - '0' ) * checkArr[ i + arrOffset ];
        }

        return ( sum % 11 ) % 10 == inn.charAt ( length - offset ) - '0';
    }

}
